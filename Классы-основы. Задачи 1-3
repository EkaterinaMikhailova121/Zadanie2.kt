//Задача 1
import kotlin.math.abs

class Point(val x: Double, val y: Double)

class Triangle(val point1: Point, val point2: Point, val point3: Point) {
    fun isInside(point: Point): Boolean {
        val area1 = calculateTriangleArea(point, point1, point2)
        val area2 = calculateTriangleArea(point, point2, point3)
        val area3 = calculateTriangleArea(point, point3, point1)
        val triangleArea = calculateTriangleArea(point1, point2, point3)
        
        return abs(triangleArea - area1 - area2 - area3) < 0.0001 // to handle floating point precision issues
    }
    
    private fun calculateTriangleArea(point1: Point, point2: Point, point3: Point): Double {
        return 0.5 * ((point2.x - point1.x) * (point3.y - point1.y) - (point3.x - point1.x) * (point2.y - point1.y))
    }
}

fun main() {
    try {
        val point1 = Point(0.0, 0.0)
        val point2 = Point(0.0, 4.0)
        val point3 = Point(4.0, 0.0)
        
        val triangle = Triangle(point1, point2, point3)
        
        println("Enter the coordinates of a point:")
        val x = readLine()?.toDouble() ?: 0.0
        val y = readLine()?.toDouble() ?: 0.0
        
        val point = Point(x, y)
        
        val isInside = triangle.isInside(point)
        
        if (isInside) {
            println("The point is inside the triangle.")
        } else {
            println("The point is outside the triangle.")
        }
    } catch (e: Exception) {
        println("An error occurred: ${e.message}")
    }
}




//Задача 2
import kotlin.math.sqrt

class Point(val x: Double, val y: Double)

fun calculateDistance(point1: Point, point2: Point): Double {
    val deltaX = point2.x - point1.x
    val deltaY = point2.y - point1.y
    return sqrt(deltaX * deltaX + deltaY * deltaY)
}

fun main() {
    try {
        println("Enter the coordinates of the first point:")
        val x1 = readLine()?.toDouble() ?: 0.0
        val y1 = readLine()?.toDouble() ?: 0.0
        
        println("Enter the coordinates of the second point:")
        val x2 = readLine()?.toDouble() ?: 0.0
        val y2 = readLine()?.toDouble() ?: 0.0
        
        val point1 = Point(x1, y1)
        val point2 = Point(x2, y2)
        
        val distance = calculateDistance(point1, point2)
        
        println("The distance between the two points is: $distance")
    } catch (e: Exception) {
        println("An error occurred: ${e.message}")
    }
}




//Задача 3
import kotlin.math.sqrt

class Point(val x: Double, val y: Double)

fun calculateDistance(point1: Point, point2: Point): Double {
    val deltaX = point2.x - point1.x
    val deltaY = point2.y - point1.y
    return sqrt(deltaX * deltaX + deltaY * deltaY)
}

fun main() {
    try {
        println("Enter the number of points:")
        val numPoints = readLine()?.toInt() ?: 0
        
        if (numPoints <= 2) {
            println("Number of points should be greater than 2.")
            return
        }
        
        val points = mutableListOf<Point>()
        
        for (i in 1..numPoints) {
            println("Enter the coordinates of point $i:")
            val x = readLine()?.toDouble() ?: 0.0
            val y = readLine()?.toDouble() ?: 0.0
            
            val point = Point(x, y)
            points.add(point)
        }
        
        var minDistance = Double.MAX_VALUE
        var maxDistance = Double.MIN_VALUE
        
        for (i in 0 until numPoints - 1) {
            for (j in i + 1 until numPoints) {
                val distance = calculateDistance(points[i], points[j])
                minDistance = minOf(min
